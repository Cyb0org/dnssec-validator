# ====================
# Global configuration
# ====================

PLUGIN_NAME_DNSSEC = DNSSECValidatorPlugin
PLUGIN_NAME_TLSA = TLSAValidatorPlugin
EXTENSION_VERSION = $(shell cat Version)
#EXTENSION_VERSION = $(shell cat add-on/firefox2/install.rdf.template | sed -n 's/.*<em:version>\(.*\)<\/em:version>.*/\1/p')

# TODO: remove?
BASEDIR := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))

PLUGIN_ADD_ON = packages
ADDON_PATH_FF = add-on/firefox2
ADDON_PATH_CR = add-on/chrome2
ADDON_PATH_CR_TLSA = add-on/chrome2tlsa
PLUGIN_BUILD_DIR := build

## uncomment to make plugin build verbose - shows gcc invocations etc.
#PLUGIN_VERBOSE_BUILD = VERBOSE=1

## Configuration is one of Debug, Release, MinSizeRel and RelWithDebInfo.
## You need to run 'make prepmake' after changing.
PLUGIN_CONFIGURATION ?= MinSizeRel

# ============
# Dependencies
# ============

DOWNLOAD_DIR = download

FIREBREATH_VERSION = 1.7.0
FIREBREATH_DIR = FireBreath
FIREBREATH_TARBALL = firebreath-$(FIREBREATH_VERSION).tar.gz
FIREBREATH_URL = https://github.com/firebreath/FireBreath/archive/$(FIREBREATH_TARBALL)

BUNDLED_SOURCES_DIR = libs-source
BUNDLED_LIBS_DIR = $(BASEDIR)/libs

OPENSSL_VERSION = 1.0.1e
OPENSSL_VERSIONED_NAME = openssl-$(OPENSSL_VERSION)
OPENSSL_DIR = $(BUNDLED_SOURCES_DIR)/$(OPENSSL_VERSIONED_NAME)
OPENSSL_LIB = $(BUNDLED_LIBS_DIR)/openssl
OPENSSL_TARBALL = $(OPENSSL_VERSIONED_NAME).tar.gz
OPENSSL_URL = https://www.openssl.org/source/$(OPENSSL_TARBALL)

LDNS_VERSION = 1.6.16
LDNS_VERSIONED_NAME = ldns-$(LDNS_VERSION)
LDNS_DIR = $(BUNDLED_SOURCES_DIR)/$(LDNS_VERSIONED_NAME)
LDNS_LIB = $(BUNDLED_LIBS_DIR)/ldns
LDNS_TARBALL = $(LDNS_VERSIONED_NAME).tar.gz
LDNS_URL = http://www.nlnetlabs.nl/downloads/ldns/$(LDNS_TARBALL)

UNBOUND_VERSION = 1.4.20
UNBOUND_VERSIONED_NAME = unbound-$(UNBOUND_VERSION)
UNBOUND_DIR = $(BUNDLED_SOURCES_DIR)/$(UNBOUND_VERSIONED_NAME)
UNBOUND_LIB = $(BUNDLED_LIBS_DIR)/unbound
UNBOUND_TARBALL = $(UNBOUND_VERSIONED_NAME).tar.gz
UNBOUND_URL = http://unbound.net/downloads/$(UNBOUND_TARBALL)

ifdef USE_SYSTEM_LIBS
   DEPENDENCIES = $(FIREBREATH_DIR)
else
   DEPENDENCIES = $(FIREBREATH_DIR) $(OPENSSL_LIB) $(LDNS_LIB) $(UNBOUND_LIB)
endif

# ====================
# Builds configuration
# ====================

CFLAGS=-fPIC
export CFLAGS

# =============
# Build targets
# =============

# Different NPAPI plugin names based on OS
# PLUGIN_BINARY_TREE is necessary because Mac has dirtree structure instead of
# a single file.
ifeq ($(TARGET_OS),LINUX)
   ifeq ($(MAKETYPE),gmake)
     MAKE_OS := Makefile.bsd
     ARCH := sys_freebsd_x64
     XPI := xpi_x64 
   else
     ifeq ($(BUILD_64BIT),1)
      MAKE_OS := Makefile.lin
      ARCH := sys_linux_x64
      XPI := xpi_x64
     else
      ARCH := sys_linux_x86
      XPI := xpi_x86
      MAKE_OS := Makefile.lin
     endif
  endif
endif
ifeq ($(TARGET_OS),MAC)
    MAKE_OS := Makefile.mac
    ifeq ($(BUILD_MAC96),1)
        ARCH := sys_macosx
        XPI := xpi
    else	
    ifeq ($(BUILD_64BIT),1)
      ARCH := sys_macosx_x64
      XPI := xpi_x64
    else 
        ARCH := sys_macosx_x86
        XPI := xpi_x86
      endif 
    endif 
endif
ifeq ($(TARGET_OS),WINDOWS)
    MAKE_OS := Makefile.win
    ARCH := sys_windows_x86
    XPI := xpi_x86
endif

.PHONY: all submodules libs-build plugin

all: $(DEPENDENCIES)
	echo use system libs: $(DEPENDENCIES)
	echo fools

# firebreath framework

$(DOWNLOAD_DIR)/$(FIREBREATH_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(FIREBREATH_URL) -O $@

$(FIREBREATH_DIR): $(DOWNLOAD_DIR)/$(FIREBREATH_TARBALL)
	mkdir -p $(FIREBREATH_DIR)
	tar xzf $< --strip-components=1 -C $(FIREBREATH_DIR)

# bundled OpenSSL

$(DOWNLOAD_DIR)/$(OPENSSL_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(OPENSSL_URL) -O $@

$(OPENSSL_DIR): $(DOWNLOAD_DIR)/$(OPENSSL_TARBALL)
	mkdir -p $(BUNDLED_SOURCES_DIR)
	tar xzf $< -C $(BUNDLED_SOURCES_DIR)

$(OPENSSL_LIB): $(OPENSSL_DIR)
	echo "-- compiling OpenSSL"
	mkdir -p $(BUNDLED_LIBS_DIR)
	(cd $< && \
	./Configure no-shared no-krb5 --prefix=$@ $(OPENSSL_ARGS) && \
	$(MAKETYPE) -j1 && \
	$(MAKETYPE) -j1 install_sw)

# bundled LDNS

$(DOWNLOAD_DIR)/$(LDNS_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(LDNS_URL) -O $@

$(LDNS_DIR): $(DOWNLOAD_DIR)/$(LDNS_TARBALL)
	mkdir -p $(BUNDLED_SOURCES_DIR)
	tar xzf $< -C $(BUNDLED_SOURCES_DIR)

$(LDNS_LIB): $(LDNS_DIR) $(OPENSSL_LIB)
	echo "-- compiling ldns"
	mkdir -p $(BUNDLED_LIBS_DIR)
	(cd $< && \
	CFLAGS="$(LIB_CFLAGS)" ./configure --disable-shared --with-ssl=$(OPENSSL_LIB) \
	--with-pic --prefix=$@ $(CONFIGURE_ARGS) && \
	$(MAKETYPE) && \
	$(MAKETYPE) install)

# bundled Unbound

$(DOWNLOAD_DIR)/$(UNBOUND_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(UNBOUND_URL) -O $@

$(UNBOUND_DIR): $(DOWNLOAD_DIR)/$(UNBOUND_TARBALL)
	mkdir -p $(BUNDLED_SOURCES_DIR)
	tar xzf $< -C $(BUNDLED_SOURCES_DIR)

$(UNBOUND_LIB): $(UNBOUND_DIR) $(OPENSSL_LIB) $(LDNS_LIB)
	echo "-- compiling unbound"
	mkdir -p $(BUNDLED_LIBS_DIR)
	(cd $< && \
	CFLAGS="$(LIB_CFLAGS)" ./configure --disable-shared \
	--with-ssl=$(OPENSSL_LIB) --with-ldns=$(LDNS_LIB) --without-libevent \
	--with-pic --prefix=$@ $(CONFIGURE_ARGS) && \
	$(MAKETYPE) && \
	$(MAKETYPE) install)

## plugin
plugin:
#	$(MAKETYPE) -f $(MAKE_OS) $(ARCH)
#	$(MAKETYPE) -f $(MAKE_OS) $(XPI)

clean:
	rm -rf $(FIREBREATH_DIR)
	rm -rf $(DOWNLOAD_DIR)
	rm -rf $(BUNDLED_SOURCES_DIR)
	rm -rf $(BUNDLED_LIBS_DIR)
	rm -rf CMakeCache.txt CMakeFiles/ cmake_install.cmake
