# ====================
# Global configuration
# ====================

PLUGIN_NAME_DNSSEC = DNSSECValidatorPlugin
PLUGIN_NAME_TLSA = TLSAValidatorPlugin
EXTENSION_VERSION = $(shell cat Version)

BASEDIR := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))

PLUGIN_SOURCE_DIR = plugin-source
PLUGIN_BUILD_DIR = build

PACKAGES_DIR = packages

FIREFOX_ADDON_DIR = add-on/firefox2
CHROME_ADDON_DIR = add-on/chrome2
CHROME_TLSA_ADDON_DIR = add-on/chrome2tlsa

FIREBREATH_OPTS = -DCMAKE_VERBOSE_MAKEFILE=1 -DCMAKE_BUILD_TYPE=MinSizeRel

# ============
# Dependencies
# ============

DOWNLOAD_DIR = download

FIREBREATH_VERSION = 1.7.0
FIREBREATH_DIR = FireBreath
FIREBREATH_TARBALL = firebreath-$(FIREBREATH_VERSION).tar.gz
FIREBREATH_URL = https://github.com/firebreath/FireBreath/archive/$(FIREBREATH_TARBALL)

BUNDLED_SOURCES_DIR = libs-source
BUNDLED_LIBS_DIR = $(BASEDIR)/libs

OPENSSL_VERSION = 1.0.1e
OPENSSL_VERSIONED_NAME = openssl-$(OPENSSL_VERSION)
OPENSSL_DIR = $(BUNDLED_SOURCES_DIR)/$(OPENSSL_VERSIONED_NAME)
OPENSSL_LIB = $(BUNDLED_LIBS_DIR)/openssl
OPENSSL_TARBALL = $(OPENSSL_VERSIONED_NAME).tar.gz
OPENSSL_URL = https://www.openssl.org/source/$(OPENSSL_TARBALL)

LDNS_VERSION = 1.6.16
LDNS_VERSIONED_NAME = ldns-$(LDNS_VERSION)
LDNS_DIR = $(BUNDLED_SOURCES_DIR)/$(LDNS_VERSIONED_NAME)
LDNS_LIB = $(BUNDLED_LIBS_DIR)/ldns
LDNS_TARBALL = $(LDNS_VERSIONED_NAME).tar.gz
LDNS_URL = http://www.nlnetlabs.nl/downloads/ldns/$(LDNS_TARBALL)

UNBOUND_VERSION = 1.4.20
UNBOUND_VERSIONED_NAME = unbound-$(UNBOUND_VERSION)
UNBOUND_DIR = $(BUNDLED_SOURCES_DIR)/$(UNBOUND_VERSIONED_NAME)
UNBOUND_LIB = $(BUNDLED_LIBS_DIR)/unbound
UNBOUND_TARBALL = $(UNBOUND_VERSIONED_NAME).tar.gz
UNBOUND_URL = http://unbound.net/downloads/$(UNBOUND_TARBALL)

ifdef WITH_SYSTEM_LIBS
   DEPENDENCIES = $(FIREBREATH_DIR)
   FIREBREATH_OPTS += -DWITH_SYSTEM_BOOST:BOOL=YES
else
   DEPENDENCIES = $(FIREBREATH_DIR) $(OPENSSL_LIB) $(LDNS_LIB) $(UNBOUND_LIB)
endif

# ====================
# Architecture options
# ====================

ifeq ($(BUILD_64BIT),1)
   PLUGIN_LIB_SUFFIX=_x64
   FIREBREATH_OPTS += -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_FLAGS=-m64
else
   PLUGIN_LIB_SUFFIX=_x86
   FIREBREATH_OPTS += -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32
endif

# =============
# Build targets
# =============

# Different NPAPI plugin names based on OS
# PLUGIN_BINARY_TREE is necessary because Mac has dirtree structure instead of
# a single file.
ifeq ($(TARGET_OS),LINUX)
   ifeq ($(MAKETYPE),gmake)
     MAKE_OS := Makefile.bsd
     ARCH := sys_freebsd_x64
     XPI := xpi_x64 
   else
     ifeq ($(BUILD_64BIT),1)
      MAKE_OS := Makefile.lin
      ARCH := sys_linux_x64
      XPI := xpi_x64
     else
      ARCH := sys_linux_x86
      XPI := xpi_x86
      MAKE_OS := Makefile.lin
     endif
  endif
endif
ifeq ($(TARGET_OS),MAC)
    MAKE_OS := Makefile.mac
    ifeq ($(BUILD_MAC96),1)
        ARCH := sys_macosx
        XPI := xpi
    else	
    ifeq ($(BUILD_64BIT),1)
      ARCH := sys_macosx_x64
      XPI := xpi_x64
    else 
        ARCH := sys_macosx_x86
        XPI := xpi_x86
      endif 
    endif 
endif
ifeq ($(TARGET_OS),WINDOWS)
    MAKE_OS := Makefile.win
    ARCH := sys_windows_x86
    XPI := xpi_x86
endif


.PHONY: all clean build package

all: build

clean:
	rm -rf $(FIREBREATH_DIR)
	rm -rf $(DOWNLOAD_DIR)
	rm -rf $(BUNDLED_SOURCES_DIR)
	rm -rf $(BUNDLED_LIBS_DIR)
	rm -rf CMakeCache.txt CMakeFiles/ cmake_install.cmake

# firebreath framework

$(DOWNLOAD_DIR)/$(FIREBREATH_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(FIREBREATH_URL) -O $@

$(FIREBREATH_DIR): $(DOWNLOAD_DIR)/$(FIREBREATH_TARBALL)
	mkdir -p $(FIREBREATH_DIR)
	tar xzf $< --strip-components=1 -C $(FIREBREATH_DIR)

# bundled OpenSSL

$(DOWNLOAD_DIR)/$(OPENSSL_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(OPENSSL_URL) -O $@

$(OPENSSL_DIR): $(DOWNLOAD_DIR)/$(OPENSSL_TARBALL)
	mkdir -p $(BUNDLED_SOURCES_DIR)
	tar xzf $< -C $(BUNDLED_SOURCES_DIR)

$(OPENSSL_LIB): $(OPENSSL_DIR)
	echo "-- compiling OpenSSL"
	mkdir -p $(BUNDLED_LIBS_DIR)
	(cd $< && \
	./Configure no-shared no-krb5 --prefix=$@ $(OPENSSL_ARGS) && \
	$(MAKETYPE) -j1 && \
	$(MAKETYPE) -j1 install_sw)

# bundled LDNS

$(DOWNLOAD_DIR)/$(LDNS_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(LDNS_URL) -O $@

$(LDNS_DIR): $(DOWNLOAD_DIR)/$(LDNS_TARBALL)
	mkdir -p $(BUNDLED_SOURCES_DIR)
	tar xzf $< -C $(BUNDLED_SOURCES_DIR)

$(LDNS_LIB): $(LDNS_DIR) $(OPENSSL_LIB)
	echo "-- compiling ldns"
	mkdir -p $(BUNDLED_LIBS_DIR)
	(cd $< && \
	CFLAGS="$(LIB_CFLAGS)" ./configure --disable-shared --with-ssl=$(OPENSSL_LIB) \
	--with-pic --prefix=$@ $(CONFIGURE_ARGS) && \
	$(MAKETYPE) && \
	$(MAKETYPE) install)

# bundled Unbound

$(DOWNLOAD_DIR)/$(UNBOUND_TARBALL):
	mkdir -p $(DOWNLOAD_DIR)
	wget $(UNBOUND_URL) -O $@

$(UNBOUND_DIR): $(DOWNLOAD_DIR)/$(UNBOUND_TARBALL)
	mkdir -p $(BUNDLED_SOURCES_DIR)
	tar xzf $< -C $(BUNDLED_SOURCES_DIR)

$(UNBOUND_LIB): $(UNBOUND_DIR) $(OPENSSL_LIB) $(LDNS_LIB)
	echo "-- compiling unbound"
	mkdir -p $(BUNDLED_LIBS_DIR)
	(cd $< && \
	CFLAGS="$(LIB_CFLAGS)" ./configure --disable-shared \
	--with-ssl=$(OPENSSL_LIB) --with-ldns=$(LDNS_LIB) --without-libevent \
	--with-pic --prefix=$@ $(CONFIGURE_ARGS) && \
	$(MAKETYPE) && \
	$(MAKETYPE) install)

# plugin

$(PLUGIN_BUILD_DIR)/Makefile:
	echo "-- creating build configuration"
	mkdir -p $(PLUGIN_BUILD_DIR)
	$(FIREBREATH_DIR)/prepmake.sh $(PLUGIN_SOURCE_DIR) $(PLUGIN_BUILD_DIR) $(FIREBREATH_OPTS)

build: $(DEPENDENCIES) $(PLUGIN_BUILD_DIR)/Makefile
	echo "-- building plugin"
	$(MAKETYPE) -C $(PLUGIN_BUILD_DIR)
	echo $(MAKETYPE) -f $(MAKE_OS) $(ARCH)
	echo $(MAKETYPE) -f $(MAKE_OS) $(XPI)

# package

firefox-plugin: build
	rm -rf $(FIREFOX_ADDON_DIR)/plugins
	mkdir -p $(FIREFOX_ADDON_DIR)/plugins
	cp -vf $(PLUGIN_BUILD_DIR)/bin/$(PLUGIN_NAME_DNSSEC)/np$(PLUGIN_NAME_DNSSEC).so \
	      $(FIREFOX_ADDON_DIR)/plugins/np$(PLUGIN_NAME_DNSSEC)$(PLUGIN_LIB_SUFFIX).so
	cp -vf $(PLUGIN_BUILD_DIR)/bin/$(PLUGIN_NAME_TLSA)/np$(PLUGIN_NAME_TLSA).so \
	      $(FIREFOX_ADDON_DIR)/plugins/np$(PLUGIN_NAME_TLSA)$(PLUGIN_LIB_SUFFIX).so
	# TODO: FIX TARGET PLATFORM
	sed -e 's/<em:version><\/em:version>/<em:version>$(EXTENSION_VERSION)<\/em:version>/g' \
	    -e 's/<em:targetPlatform><\/em:targetPlatform>/<em:targetPlatform>Linux_x86_64-gcc3<\/em:targetPlatform>/g' \
		$(FIREFOX_ADDON_DIR)/install.rdf.template > $(FIREFOX_ADDON_DIR)/install.rdf
	mkdir -p $(PACKAGES_DIR)
	# TODO: FIX TARGET PLATFORM
	pushd $(FIREFOX_ADDON_DIR) && sh build.sh && popd && mv $(FIREFOX_ADDON_DIR)/dnssec.xpi $(PACKAGES_DIR)/FF-dnssec-tlsa_validator-$(EXTENSION_VERSION)-linux-x86_64.xpi

chrome-plugin:
	cp $(PLUGIN_BUILD_DIR)/bin/$(PLUGIN_NAME_DNSSEC)/np$(PLUGIN_NAME_DNSSEC).so \
	   $(CHROME_ADDON_DIR)/np$(PLUGIN_NAME_DNSSEC)$(PLUGIN_LIB_SUFFIX).so
	sed -e 's/dnssecplugin/np$(PLUGIN_NAME_DNSSEC)$(PLUGIN_LIB_SUFFIX).so/g' \
	    -e 's/version-of-add-on/$(EXTENSION_VERSION)/g' \
	    $(CHROME_ADDON_DIR)/manifest.json.template > $(CHROME_ADDON_DIR)/manifest.json
	mkdir -p $(PACKAGES_DIR)
	# TODO: FIX TARGET PLATFORM
	# TODO: FIX PATH INSIDE TARBALL
	tar -czf $(PACKAGES_DIR)/CR-dnssec_validator-$(EXTENSION_VERSION)-linux-x64.tar.gz $(CHROME_ADDON_DIR)
	rm -f $(CHROME_ADDON_DIR)/manifest.json $(CHROME_ADDON_DIR)/np$(PLUGIN_NAME_DNSSEC)$(PLUGIN_LIB_SUFFIX).so

chrome-plugin-tlsa:
	cp $(PLUGIN_BUILD_DIR)/bin/$(PLUGIN_NAME_TLSA)/np$(PLUGIN_NAME_TLSA).so \
	   $(CHROME_TLSA_ADDON_DIR)/np$(PLUGIN_NAME_TLSA)$(PLUGIN_LIB_SUFFIX).so
	sed -e 's/tlsaplugin/np$(PLUGIN_NAME_TLSA)$(PLUGIN_LIB_SUFFIX).so/g' \
	    -e 's/version-of-add-on/$(EXTENSION_VERSION)/g' \
	    $(CHROME_TLSA_ADDON_DIR)/manifest.json.template > $(CHROME_TLSA_ADDON_DIR)/manifest.json
	mkdir -p $(PACKAGES_DIR)
	# TODO: FIX TARGET PLATFORM
	# TODO: FIX PATH INSIDE TARBALL
	tar -czf $(PACKAGES_DIR)/CR-tlsa_validator-$(EXTENSION_VERSION)-linux-x64.tar.gz $(CHROME_TLSA_ADDON_DIR)
	rm -f $(CHROME_TLSA_ADDON_DIR)/manifest.json $(CHROME_TLSA_ADDON_DIR)/np$(PLUGIN_NAME_TLSA)$(PLUGIN_LIB_SUFFIX).so


packages: firefox-plugin chrome-plugin chrome-plugin-tlsa
	echo "-- creating package"

all: packages
	
