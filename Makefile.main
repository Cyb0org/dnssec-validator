# ====================
# Global configuration
# ====================

PLUGIN_NAME_DNSSEC = DNSSECValidatorPlugin
PLUGIN_NAME_TLSA = TLSAValidatorPlugin
EXTENSION_VERSION = $(shell cat Version)
#EXTENSION_VERSION = $(shell cat add-on/firefox2/install.rdf.template | sed -n 's/.*<em:version>\(.*\)<\/em:version>.*/\1/p')

# TODO: remove?
BASEDIR := $(realpath $(dir $(lastword $(MAKEFILE_LIST))))

PLUGIN_ADD_ON = packages
ADDON_PATH_FF = add-on/firefox2
ADDON_PATH_CR = add-on/chrome2
ADDON_PATH_CR_TLSA = add-on/chrome2tlsa

## uncomment to make plugin build verbose - shows gcc invocations etc.
#PLUGIN_VERBOSE_BUILD = VERBOSE=1

## Configuration is one of Debug, Release, MinSizeRel and RelWithDebInfo.
## You need to run 'make prepmake' after changing.
PLUGIN_CONFIGURATION ?= MinSizeRel

FIREBREATH_DIR := FireBreath

BUNDLED_LIBS_SOURCE_DIR := libs-source
BUNDLED_LIBS_DIR := libs

PLUGIN_BUILD_DIR := build

# ==============================================
# Paths to libraries for bundled/unbundled build
# ==============================================

ifdef USE_SYSTEM_LIBS
   DEPENDENCIES = $(FIREBREATH_DIR)
else
   OPENSSL_TARBALL = $(BUNDLED_LIBS_SOURCE_DIR)/openssl-1.0.1e.tar.gz
   LDNS_TARBALL = $(BUNDLED_LIBS_SOURCE_DIR)/ldns-1.6.16.tar.gz
   UNBOUND_TARBALL = $(BUNDLED_LIBS_SOURCE_DIR)/unbound-1.4.20.tar.gz
   
   OPENSSL_DIR := $(BASEDIR)/libs/openssl-1.0.1e
   LDNS_DIR := $(BASEDIR)/libs/ldns-1.6.16
   UNBOUND_DIR := $(BASEDIR)/libs/unbound-1.4.20
   
   OPENSSL_LIB := $(BASEDIR)/libs/openssl
   LDNS_LIB := $(BASEDIR)/libs/ldns
   UNBOUND_LIB := $(BASEDIR)/libs/unbound

   DEPENDENCIES = $(FIREBREATH_DIR) $(BUNDLED_LIBS_SOURCE_DIR) $(OPENSSL_LIB) $(LDNS_LIB) $(UNBOUND_LIB)
endif

# ====================
# Builds configuration
# ====================

CFLAGS=-fPIC
export CFLAGS

# =============
# Build targets
# =============

# Different NPAPI plugin names based on OS
# PLUGIN_BINARY_TREE is necessary because Mac has dirtree structure instead of
# a single file.
ifeq ($(TARGET_OS),LINUX)
   ifeq ($(MAKETYPE),gmake)
     MAKE_OS := Makefile.bsd
     ARCH := sys_freebsd_x64
     XPI := xpi_x64 
   else
     ifeq ($(BUILD_64BIT),1)
      MAKE_OS := Makefile.lin
      ARCH := sys_linux_x64
      XPI := xpi_x64
     else
      ARCH := sys_linux_x86
      XPI := xpi_x86
      MAKE_OS := Makefile.lin
     endif
  endif
endif
ifeq ($(TARGET_OS),MAC)
    MAKE_OS := Makefile.mac
    ifeq ($(BUILD_MAC96),1)
        ARCH := sys_macosx
        XPI := xpi
    else	
    ifeq ($(BUILD_64BIT),1)
      ARCH := sys_macosx_x64
      XPI := xpi_x64
    else 
        ARCH := sys_macosx_x86
        XPI := xpi_x86
      endif 
    endif 
endif
ifeq ($(TARGET_OS),WINDOWS)
    MAKE_OS := Makefile.win
    ARCH := sys_windows_x86
    XPI := xpi_x86
endif

.PHONY: all submodules libs-build plugin

all:
	echo use system libs: $(DEPENDENCIES)
	echo fools

$(FIREBREATH_DIR):
	git clone https://github.com/firebreath/FireBreath.git $@

# bundled libraries:

$(BUNDLED_LIBS_SOURCE_DIR):
	git clone https://gitlab.labs.nic.cz/mstraka/dnssec-libs.git $@

$(BUNDLED_LIBS_DIR):
	mkdir -p $@

$(OPENSSL_DIR): $(BUNDLED_LIBS_SOURCE_DIR) $(BUNDLED_LIBS_DIR)
	tar xzf $(OPENSSL_TARBALL) -C $(BUNDLED_LIBS_DIR)

$(OPENSSL_LIB): $(OPENSSL_DIR)
	(cd $< && ./Configure no-shared no-krb5 --prefix=$@ $(OPENSSL_ARGS) && $(MAKETYPE) -j1 && $(MAKETYPE) -j1 install)

$(LDNS_DIR): $(BUNDLED_LIBS_SOURCE_DIR) $(BUNDLED_LIBS_DIR)
	tar xzf $(LDNS_TARBALL) -C $(BUNDLED_LIBS_DIR)

$(LDNS_LIB): $(LDNS_DIR) $(OPENSSL_LIB)
	(cd $< && \
	   CFLAGS="$(LIB_CFLAGS)" ./configure --disable-shared --with-ssl=$(OPENSSL_LIB) \
	   --with-pic --prefix=$@ $(CONFIGURE_ARGS) && \
	   $(MAKETYPE) && \
	   $(MAKETYPE) install)

$(UNBOUND_DIR): $(BUNDLED_LIBS_SOURCE_DIR) $(BUNDLED_LIBS_DIR)
	tar xzf $(UNBOUND_TARBALL) -C $(BUNDLED_LIBS_DIR)

$(UNBOUND_LIB): $(UNBOUND_DIR) $(LDNS_LIB) $(OPENSSL_LIB)
	(cd $< && \
	   CFLAGS="$(LIB_CFLAGS)" ./configure --disable-shared \
	   --with-ssl=$(OPENSSL_LIB) --with-ldns=$(LDNS_LIB) --without-libevent \
	   --with-pic --prefix=$@ $(CONFIGURE_ARGS) && \
	   $(MAKETYPE) && \
	   $(MAKETYPE) install)

## plugin
plugin:
#	$(MAKETYPE) -f $(MAKE_OS) $(ARCH)
#	$(MAKETYPE) -f $(MAKE_OS) $(XPI)

clean:
	rm -rf $(BUNDLED_LIBS_SOURCE_DIR)
	rm -rf $(FIREBREATH_DIR)
	rm -rf $(BUNDLED_LIBS_SOURCE_DIR)
	rm -rf CMakeCache.txt CMakeFiles/ cmake_install.cmake
